{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAAoD;AACpD,+DAAoE;AACpE,yCAAsE;AACtE,8CAA8E;AAE9E;;;;;;;GAOG;AACH,IAAM,WAAW,GAAG,UAAC,KAAS,EAAE,MAAM;IAAjB,sBAAA,EAAA,SAAS;IAC5B,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB,KAAK,WAAW;YACd,MAAM,CAAC,KAAK,GAAG,CAAC,CAAA;QAClB,KAAK,WAAW;YACd,MAAM,CAAC,KAAK,GAAG,CAAC,CAAA;QAClB;YACE,MAAM,CAAC,KAAK,CAAA;IAChB,CAAC;AACH,CAAC,CAAA;AAED;;;;;;;GAOG;AACH;;QACE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;;;CAC5B;AAED;;;;gBACE,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;gBAC7B,qBAAM,aAAG,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,EAAA;;gBAA9B,SAA8B,CAAA;gBAC9B,qBAAM,cAAI,CAAC,kBAAK,EAAE,IAAI,CAAC,EAAA;;gBAAvB,SAAuB,CAAA;gBACvB,qBAAM,aAAG,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,EAAA;;gBAA9B,SAA8B,CAAA;;;;CAE/B;AAED;;;oBACE,qBAAM,cAAI,CAAC,SAAS,CAAC,EAAA;;gBAArB,SAAqB,CAAA;;;;CACtB;AAED;;;oBACE,qBAAM,cAAI,CAAC,QAAQ,CAAC,EAAA;;gBAApB,SAAoB,CAAA;gBACpB,qBAAM,cAAI,CAAC,WAAW,CAAC,EAAA;;gBAAvB,SAAuB,CAAA;;;;CACxB;AAED;;;;;;;GAOG;AACH,IAAM,YAAY,GAAG,EAAE,CAAA;AAEvB;;;;;;;GAOG;AACH,IAAM,cAAc,GAAG,oBAAoB,EAAE,CAAA;AAC7C,IAAM,UAAU,GAAG,CAAC,cAAc,CAAC,CAAA;AAEnC,IAAM,gBAAgB,GAAG,2CAAmB,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAA;AAC1E,IAAM,KAAK,GAAG,mBAAW,CAAC,WAAW,EAAE,YAAY,EAAE,gBAAgB,CACnE,uBAAe,eAAI,UAAU,EAC9B,CAAC,CAAA;AAEF,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;AAE5B;;;;;;;;;;;;;;;;;;;GAmBG;AAEU,QAAA,GAAG,GAAI,UAAC,CAAC,EAAE,CAAC;IACvB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,CAAC,CAAA","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools }          from 'remote-redux-devtools'\nimport createSagaMiddleware, { SagaIterator, delay } from 'redux-saga'\nimport { call, put }                                 from 'redux-saga/effects'\n\n/**\n *\n *\n *\n *\n * ~~~ reducer\n *\n */\nconst rootReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\n/**\n *\n *\n *\n *\n * ~~~ sagas\n *\n */\nfunction* helloSaga() {\n  console.log('Hello Sagas!')\n}\n\nfunction* anotherSaga(): SagaIterator {\n  console.log('Hello Sagas 2!')\n  yield put({type: 'INCREMENT'})\n  yield call(delay, 3000)\n  yield put({type: 'INCREMENT'})\n  \n}\n\nfunction* someSaga() {\n  yield call(helloSaga)\n}\n\nfunction* rootSaga() {\n  yield call(someSaga)\n  yield call(anotherSaga)\n}\n\n/**\n *\n *\n *\n *\n * ~~~ initial state\n *\n */\nconst initialState = 10\n\n/**\n *\n *\n *\n *\n * ~~~ store\n *\n */\nconst sagaMiddleware = createSagaMiddleware()\nconst middleware = [sagaMiddleware]\n\nconst composeEnhancers = composeWithDevTools({realtime: true, port: 8000})\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n  applyMiddleware(...middleware),\n))\n\nsagaMiddleware.run(rootSaga)\n\n/**\n *\n *\n *\n *\n * ~~~ dispatching actions\n *\n const incrementer = () => {\n  setTimeout( ()=> {\n    store.dispatch({type: 'INCREMENT'})\n    incrementer()\n  }, 1000)\n}\n \n incrementer()\n \n store.subscribe(()=> {\n  console.log(store.getState())\n})\n */\n\nexport const sum =  (a, b) => {\n  return a + b;\n}\n"]}