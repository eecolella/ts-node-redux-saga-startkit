{"version":3,"file":"saga-working.js","sourceRoot":"","sources":["../src/saga-working.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yBAA6D;AAC7D,+BAA6D;AAC7D,yCAAkE;AAClE,8CAA0E;AAC1E,+DAA4D;AAG5D,IAAM,WAAW,GAAG,UAAC,KAAS,EAAE,MAAM;IAAjB,sBAAA,EAAA,SAAS;IAC5B,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB,KAAK,WAAW;YACd,MAAM,CAAC,KAAK,GAAG,CAAC,CAAA;QAClB,KAAK,WAAW;YACd,MAAM,CAAC,KAAK,GAAG,CAAC,CAAA;QAClB;YACE,MAAM,CAAC,KAAK,CAAA;IAChB,CAAC;AACH,CAAC,CAAA;AAED;;QACE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;;;CAC5B;AAED;;;oBACE,qBAAM,aAAG,CAAC,EAAE,CAAC,EAAA;;gBAAb,SAAa,CAAA;;;;CACd;AAED;;;oBACE,qBAAM,cAAI,CAAC,SAAS,CAAC,EAAA;;gBAArB,SAAqB,CAAA;;;;CACtB;AAED;;;oBACE,qBAAM,cAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,EAAA;;gBAAjC,SAAiC,CAAA;;;;CAClC;AAED,IAAM,cAAc,GAAG,oBAAoB,EAAE,CAAA;AAC7C,IAAM,UAAU,GAAG,CAAC,cAAc,CAAC,CAAA;AAEnC,IAAM,YAAY,GAAG,CAAC,CAAC;AAEvB,IAAM,KAAK,GAAG,mBAAW,CACvB,WAAW;AACX,gBAAgB;AAEhB,kCAAkC;AAElC,WAAW;AACX,oCAAoC;AACpC,sEAAsE;AACtE,IAAI;AAEJ,2CAAmB,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAChC,uBAAe,eAAI,UAAU,EAC9B,CACF,CAAA;AAED,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;AAE5B,iBAAiB;AACjB,QAAQ,CAAA;AAER,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;AAE5C,KAAK,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,CAAA;AAEnC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;AAE5C,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAEjC,OAAO","sourcesContent":["import * as R                                    from 'ramda'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware, { SagaIterator }    from 'redux-saga'\nimport { call, put, take, all }                  from 'redux-saga/effects'\nimport { composeWithDevTools } from 'remote-redux-devtools';\n\n\nconst rootReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nfunction* helloSaga() {\n  console.log('Hello Sagas!')\n}\n\nfunction* anotherSaga(): SagaIterator {\n  yield all([])\n}\n\nfunction* someSaga() {\n  yield call(helloSaga)\n}\n\nfunction* rootSaga() {\n  yield call(someSaga, anotherSaga)\n}\n\nconst sagaMiddleware = createSagaMiddleware()\nconst middleWare = [sagaMiddleware]\n\nconst initialState = 0;\n\nconst store = createStore(\n  rootReducer,\n  // initialState,\n  \n  // applyMiddleware(...middleWare),\n  \n  // compose(\n  //   applyMiddleware(...middleWare),\n  //   // window.devToolsExtension ? window.devToolsExtension() : f => f\n  // )\n  \n  composeWithDevTools({port: 9229 })(\n    applyMiddleware(...middleWare),\n  )\n)\n\nsagaMiddleware.run(rootSaga)\n\n// (async () => {\ndebugger\n\nconsole.log('redux store', store.getState())\n\nstore.dispatch({type: 'INCREMENT'})\n\nconsole.log('redux store', store.getState())\n\nconsole.log('ramda', R.add(2, 1))\n\n// })()\n\n"]}